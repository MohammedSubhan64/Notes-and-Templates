.........................Python Operators............
Arithmetic operators(+,-,/,*)
Assignment operators(=,+=,-=,*=)
Comparison operators(==, !=,<,>,>=,<=)
Logical operators(and , or , not)
Identity operators(is , not is)
Membership operators(in, not in)
Bitwise operators(&,|, ~, ^ ,<<,>>)
........list in python.....................
list funs : append(),sort(),index(),remove(),pop(),insert(),extend(),reverse()
l=[1,2,4,3]
l.remove(3)
print(l) #[1, 2, 4]
l.insert(2,3)
print(l) #[1, 2, 3, 4]
l.append(5)
print(l) #[1, 2, 3, 4, 5]
l1=[4,8,5,6]
l1.extend(l)
print(l1) #[4, 8, 5, 6, 1, 2, 3, 4, 5]
l1.reverse()
print(l1) #[5, 4, 3, 2, 1, 6, 5, 8, 4]
l1.sort()
print(l1) #[1, 2, 3, 4, 4, 5, 5, 6, 8]

................dict in Python...........
dict = {'a':1,'b':2,'c':3}
dict.keys() # returns list of keys of dictionary
dict.values() # returns list of values of dictionary
dict.get('a') # returns value for any corresponding key
dict.items() # returns [('a',1),('b',2),('c',3)]
dict.copy() # returns copy of the dictionary
# NOTE : items() Returns view object that will be updated with any future
# changes to dict
dict.pop(KEY) # pops key-value pair with that key
dict.popitem() # removes most recent pair added
dict.setDefault(KEY,DEFAULT_VALUE)	

................Sets in Python..................
set funs :  	
s = set([1, 2, 3, 4, 5, 6, 7, 8])
s.add(9)
print(s) #{1, 2, 3, 4, 5, 6, 7, 8, 9}
s.remove(5)
print(s) #{1, 2, 3, 4, 6, 7, 8, 9}

set = {1,2,3}

set.add(item)
set.remove(item)
set.discard(item) | set.remove(item)
# removes item | remove will throw error if item is not there, discard will not
set.pop() # removes random item (since unordered)

set.isdisjoint(anotherSet) # returns true if no common elements
set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet

set.difference(anotherSet) # returns set containing items ONLY in first set
set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
set.intersection(anotherSet) # returns new set with common elements
set.intersection_update(anotherSet) # modifies first set keeping only common elements
set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set

set.union(anotherSet) # ...
set.update(anotherSet) # adds anotherSet without duplicate

...........................Tuples in python .........................
tuple = (1,2,3,1)
tuple.count(1) # returns occurence of an item
tuple.index(1) # returns index of 1 in array


...................................String in python ......................................
# ** split Function **
# The split() method breaks up a string at the specified separator and returns
# a list of strings.
text = 'Python is a fun programming language'

# split the text from space
print(text.split(' '))
# Output: ['Python', 'is', 'a', 'fun', 'programming', 'language']

# convert string to list
s="abcd"
s=list(s)
print(s)
# Output: ['a', 'b', 'c', 'd']

# ** count Function **
# The count() method returns the number of occurrences of a substring in the given string.
# Example
message = 'python is popular programming language'
# number of occurrence of 'p'
print('Number of occurrence of p:', message.count('p')) # Output: Number of occurrence of p: 4

# The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
s = '1242323'
print(s.isnumeric()) #Output: True

# The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
# check the index of 'fun'
print(message.find('fun')) # Output: 12

# The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.

name = "M3onica Gell22er "
print(name.isalnum()) # Output : False

# The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
name = "Monica"
print(name.isalpha()) #output true

# other important functions
string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
string.upper() # The upper() method converts all lowercase characters in a string into uppercase characters and returns it.
string.lower() # The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
string.islower() # The islower() method returns True if all cased characters in the string are lowercase and there is at least one cased character, False otherwise.
string.isdigit() 
string.isupper() # The isupper() method returns True if all cased characters in the string are uppercase and there is at least one cased character, False otherwise.

imp functions :- 
sorted()
set(mylist) : coverts to a set
list(string) :covert to a list
tuple()
sort(mylist)
max(mylist)
min(mylist)
string.isupper()
string.upper()
string.islower()
string.lower():- 
string.capitalize() :- capiatlize first letter
map(fun,list)
split():- convert str to list.(string.split(string codition))
join():-string.join(mylist) (converts list to string )


eg for split and join :-
s="this is a string "
sp=s.split()
print(sp) # ['this', 'is', 'a', 'string']
j=",".join(sp)
print(j) # this,is,a,string 

Dict:
d={"name":"Raj","Roll":45,"class":"CSE"}
print(d)
print(d.values())
print(d.keys())
print(d.items())
for i,j in d.items():
	print(i,"=",j)
output: 
name = Raj
Roll = 45
class = CSE

from collections import Counter
l=['x','y','z','x','x','x','y', 'z']
print(Counter(l))
s=Counter("stackapps")
print(s)
print(s.keys())
for i,j in s.items():
    if(j>0):
        print(i,j)    

.....PowerFul Functions In Python.....

1.lambda:- one line function 
sq=lambda a: a*a;
print(sq(4))
root=lambda a : a**(1/2)
print(root(4))
output:
16
2.0

2.map: takes a function and lists
def add(a,b):
    return a+b
ans=list(map(add,[4,5,6],[5,4,3])) 
print(ans)
output: [9, 9, 9]

3.enumerate: - gives index value
browsers=['chrome', 'firefox','opera','brave','edge']
e=list(enumerate(browsers))
print(e)

output: 
[(0, 'chrome'), (1, 'firefox'), (2, 'opera'), (3, 'brave'), (4, 'edge')]

4.filter: it filters based on given function 
pos=lambda a:a>0
ans=list(filter(pos,[-5,4,-1,6,2,-3,8]))
print(ans)
output: [4, 6, 2, 8]

5.zip
Id=[1,2,3,4]
names=["arbaz","basheer","pasha","raju"]
z=list(zip(Id,names))
print(z)
output:
[(1, 'arbaz'), (2, 'basheer'), (3, 'pasha'), (4, 'raju')]

...............................pattrens : .....................
pattern 1
r=5
for i in range(r):
    for j in range(i+1):
        print("*",end=" ")
    print()   

* 
* * 
* * * 
* * * * 
* * * * *  

pattern 2
r,c=4,4
for i in range(r):
    for j in range(c):
        if(j>=i):
            print("*",end=" ")
    print('')      
* * * * 
* * * 
* * 
* 

pattern 3
r=5
ch=65
for i in range(r):
    for j in range(i+1):
        a=chr(ch)
        print(a,end=" ")
    ch+=1
    print()

A 
B B 
C C C 
D D D D 
E E E E E   

pattern 4
for i in range(5):
    n=1
    for j in range(5):
        if(j<=i):
            print(n,end=" ")
        n+=1
    print()      
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

pattern 5
........modules.............

1.textwrap

import textwrap 
  
value = """This function wraps the input paragraph such that each line 
in the paragraph is at most width characters long. The wrap method 
returns a list of output lines. The returned list 
is empty if the wrapped 
output has no content."""
  
# Wrap this text. 
wrapper = textwrap.TextWrapper(width=50) 
  	
word_list = wrapper.wrap(text=value) 
  
# Print each line. 
for element in word_list: 
    print(element) 

string = wrapper.fill(text=value) 
# Print entire string.   
print(string) 

#oops
Use of Inheritance in Python
# base class
class Animal:
    
    def eat(self):
        print( "I can eat!")
    
    def sleep(self):
        print("I can sleep!")

# derived class
class Dog(Animal):
    
    def bark(self):
        print("I can bark! Woof woof!!")

# Create object of the Dog class
dog1 = Dog()

# Calling members of the base class
dog1.eat()
dog1.sleep()

# Calling member of the derived class
dog1.bark();

Output

I can eat!
I can sleep!
I can bark! Woof woof!!

Encapsulation
 
Encapsulation refers to the bundling of attributes and methods inside a single class.

It prevents outer classes from accessing and changing attributes and methods of a class. This also helps to achieve data hiding.

In Python, we denote private attributes using underscore as the prefix i.e single _ or double __. For example,


class Computer:

    def __init__(self):
        self.__maxprice = 900

    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))

    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()

# change the price
c.__maxprice = 1000
c.sell()

# using setter function
c.setMaxPrice(1000)
c.sell()

Output:

Selling Price: 900
Selling Price: 900
Selling Price: 1000




Coding Questions:
1. Program to Reverse a Number:
n=int(input("n:"))
num=n
rev=0
print("rem","num","rev")
while num>0:
    rem=num%10 #last digit-rem
    rev=(rev*10)+rem
    num=num//10 #remove last digit -q
    print(rem,num,rev)
print(rev)    
n:5463
rem num rev
3 546 3
6 54 36
4 5 364
5 0 3645
3645
2.write a fun in python that rev string maintaining order of words
#hi world #ih dlrow
s=input("Enter String :")
mylst=[]
lst=s.split()
print(lst)
for i in lst:
    r=i[::-1]
    mylst.append(r)
print("list: ",mylst)  
output :  
Enter String :hello bro
['hello', 'bro']
list:  ['olleh', 'orb']