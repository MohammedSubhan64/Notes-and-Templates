
..................Data types in python............................
1.Numeric - (integer,float,complex number)
2.Sequence Type - (list,tuple,String)
3.Boolean(True,False)
4.Dictionary - ({key1:value1 , key2:value2})
5.Set 
.........................Python Operators............
Arithmetic operators(+,-,/,*)
Assignment operators(=,+=,-=,*=)
Comparison operators(==, !=,<,>,>=,<=)
Logical operators(and , or , not)
Identity operators(is , not is)
Membership operators(in, not in)
Bitwise operators(&,|, ~, ^ ,<<,>>)
........list in python.....................
list funs : append(),count(element),sort(),index(),remove(),pop(),insert(),extend(),reverse()
l=[1,2,4,3]
l.remove(3)
print(l) #[1, 2, 4]
l.insert(2,3)
print(l) #[1, 2, 3, 4]
l.append(5)
print(l) #[1, 2, 3, 4, 5]
l1=[4,8,5,6]
l1.extend(l)
print(l1) #[4, 8, 5, 6, 1, 2, 3, 4, 5]
l1.reverse()
print(l1) #[5, 4, 3, 2, 1, 6, 5, 8, 4]
l1.sort()
print(l1) #[1, 2, 3, 4, 4, 5, 5, 6, 8]

...........................Tuples in python .........................
# tuples can not changed
tuple = (1,2,3,1)
tuple.count(1) # returns occurence of an item
tuple.index(1) # returns index of 1 in array

...................................String in python ......................................
# ** split Function **
# The split() method breaks up a string at the specified separator and returns
# a list of strings.
text = 'Python is a fun programming language'

# split the text from space
print(text.split(' '))
# Output: ['Python', 'is', 'a', 'fun', 'programming', 'language']

# convert string to list
s="abcd"
s=list(s)
print(s)
# Output: ['a', 'b', 'c', 'd']

# ** count Function **
# The count() method returns the number of occurrences of a substring in the given string.
# Example
message = 'python is popular programming language'
# number of occurrence of 'p'
print('Number of occurrence of p:', message.count('p')) # Output: Number of occurrence of p: 4

# The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
s = '1242323'
print(s.isnumeric()) #Output: True

# The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
# check the index of 'fun'
print(message.find('fun')) # Output: 12

# The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.

name = "M3onica Gell22er "
print(name.isalnum()) # Output : False

# The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
name = "Monica"
print(name.isalpha()) #output true

# other important functions
string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
string.upper() # The upper() method converts all lowercase characters in a string into uppercase characters and returns it.
string.lower() # The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
string.islower() # The islower() method returns True if all cased characters in the string are lowercase and there is at least one cased character, False otherwise.
string.isdigit() 
string.isupper() # The isupper() method returns True if all cased characters in the string are uppercase and there is at least one cased character, False otherwise.

............................s.sort vs sorted(s).......................................
The main difference between sort() and sorted() in Python lies in how you perform sorting on lists. “sort()” modifies the original list in place, while “sorted()” creates a new sorted list.

string.capitalize() :- capiatlize first letter

split():- convert str to list.(string.split(string codition))
join():-string.join(mylist) (converts list to string )

eg for split and join :-
s="this is a string "
sp=s.split()
print(sp) # ['this', 'is', 'a', 'string']
j=",".join(sp)
print(j) # this,is,a,string 


from collections import Counter
l=['x','y','z','x','x','x','y', 'z']
print(Counter(l))
s=Counter("stackapps")
print(s)
print(s.keys())
for i,j in s.items():
    if(j>1):
        print(i,"=",j,end=" , ")      
#output:
Counter({'x': 4, 'y': 2, 'z': 2})
Counter({'s': 2, 'a': 2, 'p': 2, 't': 1, 'c': 1, 'k': 1})
dict_keys(['s', 't', 'a', 'c', 'k', 'p'])
s = 2 , a = 2 , p = 2 , > 

................dict in Python...........
Dict:
d={"name":"Raj","Roll":45,"class":"CSE"}
print(d)
print(d.values()) #dict_values(['Raj', 45, 'CSE'])
print(d.keys()) #dict_keys(['name', 'Roll', 'class'])
print(d.items()) #dict_items([('name', 'Raj'), ('Roll', 45), ('class', 'CSE')])
for i,j in d.items():
	print(i,"=",j)
output: 
name = Raj
Roll = 45
class = CSE
dict = {'a':1,'b':2,'c':3}
dict.keys() # returns list of keys of dictionary
dict.values() # returns list of values of dictionary
dict.get('a') # returns value for any corresponding key
dict.items() # returns [('a',1),('b',2),('c',3)]
dict.copy() # returns copy of the dictionary
# NOTE : items() Returns view object that will be updated with any future
# changes to dict
dict.pop(KEY) # pops key-value pair with that key
dict.popitem() # removes most recent pair added
dict.setDefault(KEY,DEFAULT_VALUE)	

................Sets in Python..................
set funs :  	
s = set([1, 2, 3, 4, 5, 6, 7, 8])
s.add(9)
print(s) #{1, 2, 3, 4, 5, 6, 7, 8, 9}
s.remove(5)
print(s) #{1, 2, 3, 4, 6, 7, 8, 9}

set = {1,2,3}

set.add(item)
set.remove(item)
set.discard(item) | set.remove(item)
# removes item | remove will throw error if item is not there, discard will not
set.pop() # removes random item (since unordered)

set.isdisjoint(anotherSet) # returns true if no common elements
set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet

set.difference(anotherSet) # returns set containing items ONLY in first set
set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
set.intersection(anotherSet) # returns new set with common elements
set.intersection_update(anotherSet) # modifies first set keeping only common elements
set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set
set.union(anotherSet) # ...
set.update(anotherSet) # adds anotherSet without duplicate


.....PowerFul Functions In Python.....

1.lambda:- one line function 
sq=lambda a: a*a;
print(sq(4))
root=lambda a : a**(1/2)
print(root(4))
output:
16
2.0

2.map: takes a function and lists
#e.g 1
def add(a,b):
    return a+b
ans=list(map(add,[4,5,6],[5,4,3])) 
print(ans)
output: [9, 9, 9]
#e.g 2
l=[4,2,1]
fun=lambda a:a*a
p=map(fun,l)
print(list(p))
# output [16, 4, 1]

3.The enumerate() function adds a counter as the key of the enumerate object.(gives index value)
browsers=['chrome', 'firefox','opera','brave','edge','chrome']
e=list(enumerate(browsers))
print(e)
output: 
[(0, 'chrome'), (1, 'firefox'), (2, 'opera'), (3, 'brave'), (4, 'edge'), (5, 'chrome')]

4.filter: it filters based on given function 
pos=lambda a:a>0
ans=list(filter(pos,[-5,4,-1,6,2,-3,8]))
print(ans)
output: [4, 6, 2, 8]

5.zip
Id=[1,2,3,4]
names=["arbaz","basheer","pasha","raju"]
z=list(zip(Id,names))
print(z)
output:
[(1, 'arbaz'), (2, 'basheer'), (3, 'pasha'), (4, 'raju')]

6. Numbers System Conversion
b=bin(25) #decimal to binary 25 =11001
print(b)
print(0b11001)
print("25 converted into octal",oct(25))
def fun(n):
    b=bin(n)
    print(b)
fun(25)

.................................Arrays and numpy....................................
# search key element in array
from array import *
arr=array('i',[]) # int array declaration
#taking user input
l=int(input("Enter the length of the array :"))
for i in range(l):
  u=int(input(f"{i+1} element : "))
  arr.append(u)
print(arr)
k=int(input("Enter element fro search : " ))
for i in range(len(arr)):
  if(arr[i]==k):
    print(f"{k} found at {i+1} position")
    break
else:
  print(f"{k} is not present in {arr}")

output:
Enter the length of the array :3
1 element : 45
2 element : 67
3 element : 86
array('i', [45, 67, 86])
Enter element fro search : 67
67 found at 2 position

.............numpy(1D Arrays )...................
# different ways to create a array
# 1. array()
from numpy import *
arr1=array([1,2,3,4,5.1]) # all values will be converted to float
# print(arr1.dtype)
#print(arr1)
#2. linspace()
arr2=linspace(0,10,20) # it create 20 parts
# print(arr2)
#3. arange()
arr3=arange(1,15,2) # arange(start,stop,step)
# print(arr3)
#4 logspace
arr4=logspace(1,40,5) # its based on log
# print('%2f' %arr4[0])
#5 zeros()
# print(zeros(5))
#6 ones()
# print(ones(6))
# operations
arr=array([1,2,3,4])
#print(arr)
arr=arr+5
print(arr)
# print(sin(arr))
# print(sqrt(arr))
# print(sum(arr))
# print(min(arr))
# print(sort(arr))
# print(unique(arr))
# coping a array in numpy and its should have same id(address)
#newArr=arr.view()  # change or updating values will be reflected to both arr and newArr (shalow copying )
newArr=arr.copy() #deep copying
#print(newArr)
.......................2D and multi D Arrays.........................
ar1=array([
    [4,8,7,1,2,3],
    [5,9,3,4,5,6]
])
print(ar1)
print(ar1.dtype)
print(ar1.ndim)
print(ar1.shape)
print(ar1.size)
ar2=ar1.flatten()
print(ar2)
ar3=ar1.reshape(2,2,3) #3*4 or 2*2*3
print(ar3)
output:
[[4 8 7 1 2 3]
 [5 9 3 4 5 6]]
int64
2
(2, 6)
12
[4 8 7 1 2 3 5 9 3 4 5 6]
[[[4 8 7]
  [1 2 3]]

 [[5 9 3]
  [4 5 6]]]
..................................matrix.......................
m=matrix('1 2 3 ; 6 4 5 ; 1 6 7') # space btw element and comma btw each list
print(m)
print(m.max())
print(diagonal(m))
output:
[[1 2 3]
 [6 4 5]
 [1 6 7]]
7
[1 4 7]
...............................pattrens : .....................
pattern 1
r=5
for i in range(r):
    for j in range(i+1):
        print("*",end=" ")
    print()   

* 
* * 
* * * 
* * * * 
* * * * *  

pattern 2
r,c=4,4
for i in range(r):
    for j in range(c):
        if(j>=i):
            print("*",end=" ")
    print('')      
* * * * 
* * * 
* * 
* 

pattern 3
r=5
ch=65
for i in range(r):
    for j in range(i+1):
        a=chr(ch)
        print(a,end=" ")
    ch+=1
    print()

A 
B B 
C C C 
D D D D 
E E E E E   

pattern 4
for i in range(5):
    n=1
    for j in range(5):
        if(j<=i):
            print(n,end=" ")
        n+=1
    print()      
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

pattern 5
n=4
for i in range(1, n+1):
        print(("#" * i).rjust(n))
   #
  ##
 ###
####
........modules.............

1.textwrap

import textwrap 
  
value = """This function wraps the input paragraph such that each line 
in the paragraph is at most width characters long. The wrap method 
returns a list of output lines. The returned list 
is empty if the wrapped 
output has no content."""
  
# Wrap this text. 
wrapper = textwrap.TextWrapper(width=50) 
  	
word_list = wrapper.wrap(text=value) 
  
# Print each line. 
for element in word_list: 
    print(element) 

string = wrapper.fill(text=value) 
# Print entire string.   
print(string) 

#oops
Use of Inheritance in Python
# base class
class Animal:
    
    def eat(self):
        print( "I can eat!")
    
    def sleep(self):
        print("I can sleep!")

# derived class
class Dog(Animal):
    
    def bark(self):
        print("I can bark! Woof woof!!")

# Create object of the Dog class
dog1 = Dog()

# Calling members of the base class
dog1.eat()
dog1.sleep()

# Calling member of the derived class
dog1.bark();

Output

I can eat!
I can sleep!
I can bark! Woof woof!!

Encapsulation
 
Encapsulation refers to the bundling of attributes and methods inside a single class.

It prevents outer classes from accessing and changing attributes and methods of a class. This also helps to achieve data hiding.

In Python, we denote private attributes using underscore as the prefix i.e single _ or double __. For example,


class Computer:

    def __init__(self):
        self.__maxprice = 900

    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))

    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()

# change the price
c.__maxprice = 1000
c.sell()

# using setter function
c.setMaxPrice(1000)
c.sell()

Output:

Selling Price: 900
Selling Price: 900
Selling Price: 1000



Coding Questions:
1. Program to Reverse a Number:
n=int(input("n:"))
num=n
rev=0
sum=0 #sum of digits in a number
while num>0:
    rem=num%10 #last digit-rem
    rev=(rev*10)+rem
    num=num//10 #remove last digit -q
    sum=sum+rem #add 1 by 1 all digits of num
print(rev) 
print(sum)   
n:123
321
6

2. write a fun in python that rev string maintaining order of words
#hi world #ih dlrow
s=input("Enter String :")
mylst=[]
lst=s.split()
print(lst)
for i in lst:
    r=i[::-1]
    mylst.append(r)
print("list: ",mylst)  
output :  
Enter String :hello bro
['hello', 'bro']
list:  ['olleh', 'orb']

3. Staircase
   #
  ##
 ###
####
n=4
for i in range(1, n+1):
        print(("#" * i).rjust(n))
4. reverse a string :
s="mohammed"
res=s[::-1]
print(res)
#or  reversed() is obj type fun()
res=""
for i in reversed(s):
	res=res+i
print(res)
